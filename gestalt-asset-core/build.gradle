/*
 * Copyright 2019 MovingBlocks
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This is a Gradle build file:
 * - Gradle Homepage: http://gradle.org/
 * - Gradle Documentation: http://gradle.org/documentation
 * - View tasks for this project: $ gradlew tasks
 */

apply plugin: 'java-library'
apply plugin: 'maven-publish'

// Primary dependencies definition
dependencies {
    implementation project(":gestalt-util")
    implementation project(":gestalt-module")
    implementation project(":gestalt-inject")
    annotationProcessor project(":gestalt-inject-java")
    

    implementation "com.google.guava:guava:$guava_version"
    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation "com.android.support:support-annotations:$android_annotation_version"
    implementation "net.jcip:jcip-annotations:$jcip_annotation_version"

    testAnnotationProcessor project(":gestalt-inject-java")
    testImplementation "junit:junit:$junit_version"
    testImplementation "ch.qos.logback:logback-classic:$logback_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"

}


compileJava {
    inputs.files sourceSets.main.resources.srcDirs
    options.compilerArgs = ["-Aresource=${sourceSets.main.resources.srcDirs.join(File.pathSeparator)}"]
}
compileTestJava {
    inputs.files sourceSets.test.resources.srcDirs
    options.compilerArgs = ["-Aresource=${sourceSets.test.resources.srcDirs.join(File.pathSeparator)}"]
}


description = 'Provides support for assets - binary resources that can be loaded from modules or procedurally generated at runtime.'

sourceCompatibility = 1.8
targetCompatibility = 1.8


/***
 * Publishing
 ***/

task sourceJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    repositories {
        maven {
            credentials {
                username project.gestaltMavenRepoUsername
                password project.gestaltMavenRepoPassword
            }
            name 'TerasologyTestRepo'
            url project.version.endsWith('SNAPSHOT') ? project.snapshotPublishRepo : project.releasePublishRepo
        }
    }
    publications {
        mavenAssetCore(MavenPublication) {
            artifactId = project.name
            version = project.version

            from components.java

            artifact sourceJar
            artifact javadocJar
        }
    }
}
