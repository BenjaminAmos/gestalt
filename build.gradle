buildscript {
    repositories {
        // External libs - jcenter is Bintray and is supposed to be a superset of Maven Central, but do both just in case
        jcenter()
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        //Spotbugs
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.0.0"
    }
}

// Needed for extending the "clean" task to also delete custom stuff defined here like analytics config
apply plugin: 'base'

ext {
    dirAnalyticsConfig = 'gradle/analytics'
}

// Define configurations for analytics config
configurations {
    codeAnalyticsConfig
}

dependencies {
    // Config for our code analytics lives in a centralized repo: https://github.com/MovingBlocks/TeraConfig
    codeAnalyticsConfig group: 'org.terasology.config', name: 'codemetrics', version: '1.3.2', ext: 'zip'
}

task extractAnalyticsConfig(type: Copy) {
    description = "Extracts configuration files for our analytics from the zip we fetched as a dependency"
    from {
        configurations.codeAnalyticsConfig.collect {
            zipTree(it)
        }
    }
    into "$rootDir/$dirAnalyticsConfig"
}

// Include deletion of extracted stuff in the global clean task. Without the doLast it runs on *every* execution ...
clean.doLast {
    new File(dirAnalyticsConfig).deleteDir()
    println "Cleaned root - don't forget to re-extract stuff! 'gradlew extractAnalyticsConfig' will do so"
}

allprojects {
    apply plugin: 'idea'
    
    // Declare remote repositories we're interested in - library files will be fetched from here
    repositories {
        // Main Maven repo
        mavenCentral()
        maven {
            name "Terasology Artifactory"
            url "http://artifactory.terasology.org/artifactory/virtual-repo-live"
            allowInsecureProtocol true  // ðŸ˜±
        }
    }
}

//configure(subprojects.findAll { !it.name.contains("testpack") && !it.name.startsWith("module") }) {
subprojects {
    apply from: "$rootDir/gradle/common.gradle"
}

// Library and distribution config
description = 'A set of libraries providing core capabilities for games and game engines'

// Setup IntelliJ-IDEA
idea {
    project {
        jdkName = '1.8'
        languageLevel = 'JDK_1_8'

        ipr {
            withXml { xmlProvider ->
                def iprNode = xmlProvider.asNode()

                ideaActivateGit(iprNode)
                ideaActivateCheckstyle(iprNode)
                ideaActivateCopyright(iprNode)
            }
        }
    }

    module {
        // Exclude Gradle dir
        excludeDirs += file('gradle')

        // Exclude Eclipse dirs
        excludeDirs += file('bin')
        excludeDirs += file('.settings')
    }

    workspace.iws.withXml { xmlProvider ->
        def iwsNode = xmlProvider.asNode()
        def runManager = iwsNode.find { it.@name == 'RunManager' }
        def junitDefault = runManager.find { it.@factoryName == 'JUnit' }
        def workingDir = junitDefault.find { it.@name == 'WORKING_DIRECTORY' }
        workingDir.@value = 'file://$MODULE_DIR$'
    }

}

ext {
    // Activate 'git' as VCS
    ideaActivateGit = { Node iprNode ->
        def vcsMappings = iprNode.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsMappings.mapping.@vcs = 'Git'
    }

    // Activate and config 'Checkstyle' plugin
    ideaActivateCheckstyle = { Node iprNode ->
        def checkstyle = iprNode.component.find { it.'@name' == 'CheckStyle-IDEA' }
        if (checkstyle == null) {
            // Create new CheckStyle component
            checkstyle = iprNode.appendNode('component', [name: 'CheckStyle-IDEA'])
            // use NodeBuilder to create the config block in the xml structure
            def builder = new NodeBuilder()
            def option = builder.option(name: 'configuration') {
                map {
                    entry(key: 'active-configuration',
                            value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/checkstyle/checkstyle.xml:gestalt CheckStyle')
                    entry(key: 'check-nonjava-files', value: false)
                    entry(key: 'check-test-classes', value: true)
                    entry(key: 'location-0',
                            value: 'CLASSPATH:/sun_checks.xml:The default CheckStyle rules')
                    entry(key: 'location-1',
                            value: 'PROJECT_RELATIVE:$PROJECT_DIR$/config/checkstyle/checkstyle.xml:gestalt CheckStyle')
                    entry(key: 'property-1.samedir', value: 'config/checkstyle')
                    entry(key: 'suppress-errors', value: false)
                    entry(key: 'thirdparty-classpath', value: '')
                }
            }
            // Add result from NodeBuilder
            checkstyle.append option
        }
    }

    // Activate copyright conventions
    ideaActivateCopyright = { Node iprNode ->
        def copyrightManager = iprNode.component.find { it.'@name' == 'CopyrightManager' }
        copyrightManager.'@default' = "gestalt-module"
        def copyright = copyrightManager.copyright.find { it.option.find { it.'@name' == "myName" }?.'@value' == "gestalt-module" }
        if (copyright == null) {
            copyrightManager.append(new XmlParser().parseText('''
                <copyright>
                    <option name="notice" value="Copyright 2015 MovingBlocks&#10;&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;&#10;     http://www.apache.org/licenses/LICENSE-2.0&#10;&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License." />
                    <option name="keyword" value="Copyright" />
                    <option name="allowReplaceKeyword" value="" />
                    <option name="myName" value="gestalt-module" />
                    <option name="myLocal" value="true" />
                </copyright>
            '''))
        }
    }
}
